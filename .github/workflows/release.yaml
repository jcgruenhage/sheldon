# Publish to crates.io and upload release binaries to GitHub.
#
# This workflow contains three jobs. The first job `prepare` does two things
#   - Check that the tag is the same as the package version.
#   - Create a release on GitHub.
#
# Then the `publish` and `artifact` jobs run in parallel. `publish` runs `cargo
# publish` to publish the project to crates.io. `artifact` builds binaries for
# each supported platform and uploads them to the GitHub release.

name: release

on:
  push:
    tags: ['*']

env:
  CRATE: sheldon

jobs:
  prepare:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Calculate version from tag
        id: version
        run: echo "::set-output name=value::${GITHUB_REF#refs/tags/}"

      - name: Check tag against package version
        run: grep '^version = "${{ steps.version.outputs.value }}"$' Cargo.toml

      - uses: actions/create-release@v1
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.value }}
          release_name: ${{ steps.version.outputs.value }}

      - name: Save version and upload URL
        run: |
          mkdir details
          echo "${{ steps.version.outputs.value }}" > details/version
          echo "${{ steps.release.outputs.upload_url }}" > details/upload_url

      - uses: actions/upload-artifact@v1
        with:
          name: details
          path: details

  publish:
    needs: prepare
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Publish
      run: cargo publish --token "${{ secrets.CRATES_IO_TOKEN }}"

  artifact:
    needs: prepare

    strategy:
      matrix:
        include:
        - { os: macos-latest, target: x86_64-apple-darwin }
        - { os: macos-latest, target: aarch64-apple-darwin }
        - { os: ubuntu-latest, target: x86_64-unknown-linux-musl, prefix: x86_64-linux-musl }
        - { os: ubuntu-latest, target: aarch64-unknown-linux-musl, prefix: aarch64-linux-musl }
        - { os: ubuntu-latest, target: armv7-unknown-linux-musleabihf, prefix: arm-linux-musleabihf }

    name: artifact (${{ matrix.target }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build
        run: |
          cargo install cross
          cross build --locked --release --target ${{ matrix.target }}

      - name: Strip binary (macOS)
        if: contains(matrix.target, 'apple')
        run: strip target/${{ matrix.target }}/release/$CRATE

      - name: Strip binary (Linux)
        if: contains(matrix.target, 'apple')
        run: |
          docker run --rm -v $PWD/target:/target \
            rossmacarthur/sheldon-cross:${{ matrix.target}}-0.2.1 \
            ${{ matrix.prefix}}-strip /target/${{ matrix.target }}/release/$CRATE

      - uses: actions/download-artifact@v1
        with:
          name: details
          path: details

      - name: Get version and upload URL
        id: details
        run: |
          echo "::set-output name=version::$(cat details/version)"
          echo "::set-output name=upload_url::$(cat details/upload_url)"

      - name: Archive
        id: archive
        run: |
          mkdir release
          archive=$CRATE-${{ steps.details.outputs.version }}-${{ matrix.target }}.tar.gz
          cp target/${{ matrix.target }}/release/$CRATE release/$CRATE
          cp LICENSE* release
          cp README.md release
          cd release
          tar cfz "../$archive" -- *
          cd ..
          rm -r release
          echo "::set-output name=path::$archive"

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.details.outputs.upload_url }}
          asset_path: ${{ steps.archive.outputs.path }}
          asset_name: ${{ steps.archive.outputs.path }}
          asset_content_type: application/octet-stream
